diff -r eb6ebcaf55ff egfrd.py
--- a/egfrd.py	Fri Feb 05 16:47:14 2010 +0900
+++ b/egfrd.py	Mon Feb 08 19:16:27 2010 +0900
@@ -1451,8 +1451,7 @@
             log.info( 'adding %s to %s' % ( single, multi ) )
         shellSize = single.pid_particle_pair[1].radius * \
             ( 1.0 + self.MULTI_SHELL_FACTOR )
-        multi.addParticle(single.pid_particle_pair)
-        multi.addShell(single.pid_particle_pair[1].position, shellSize)
+        multi.addParticleAndShell(single.pid_particle_pair, shellSize)
 
     def mergeMultis( self, multi1, multi2 ):
         '''
@@ -1463,12 +1462,11 @@
 
         assert not multi1.sim.particleList[0] in multi2.sim.particleList
 
-        for pid in multi1.sim.particleList:
+        for pid, sid in multi1.pid_shell_id_map.iteritems():
             # FIXME: shells should be renewed
-            multi2.addParticle(multi1.sim.particleMatrix[pid])
-
-        for shell in multi1.shell_list:
-            multi2.addShell(shell[1].position, shell[1].radius)
+            multi2.addParticleAndShell(
+                multi1.sim.particleMatrix[pid],
+                multi1.sim.shellMatrix[sid].radius)
 
     def getNeighborsWithinRadiusNoSort( self, pos, radius, ignore=[] ):
         '''
diff -r eb6ebcaf55ff multi.py
--- a/multi.py	Fri Feb 05 16:47:14 2010 +0900
+++ b/multi.py	Mon Feb 08 19:16:27 2010 +0900
@@ -102,6 +102,7 @@
         self.domain_id = domain_id
         self.eventID = None
         self.sim = MultiBDCore( main, self )
+        self.pid_shell_id_map = {}
 
     def initialize( self, t ):
         self.lastTime = t
@@ -119,15 +120,23 @@
 
     multiplicity = property( getMultiplicity )
 
-    def addParticle(self, pid_particle_pair):
+    def __addParticle(self, pid_particle_pair):
         self.sim.addParticle(pid_particle_pair)
+        return pid_particle_pair
 
-    def addShell(self, position, size):
+    def __addShell(self, position, size):
         shell_id_shell_pair = (
             self.sim.main.shellIDGenerator(),
             SphericalShell(position, size, self.domain_id) )
         self.sim.main.shellMatrix.update(shell_id_shell_pair)
         self.sim.shellMatrix.update(shell_id_shell_pair)
+        return shell_id_shell_pair
+
+    def addParticleAndShell(self, pid_particle_pair, shellSize):
+        self.__addParticle(pid_particle_pair)
+        shell_id_shell_pair = self.__addShell(pid_particle_pair[1].position, shellSize)
+        self.pid_shell_id_map[pid_particle_pair[0]] = shell_id_shell_pair[0]
+        return pid_particle_pair, shell_id_shell_pair
 
     def check( self ):
         self.sim.check()
